// Mocks generated by Mockito 5.4.4 from annotations
// in youapp_technical_test/test/bloc/auth_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:youapp_technical_test/data/models/auth_model.dart' as _i5;
import 'package:youapp_technical_test/data/repositories/auth_repository.dart'
    as _i3;
import 'package:youapp_technical_test/data/repositories/token_repository.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTokenRepository_0 extends _i1.SmartFake
    implements _i2.TokenRepository {
  _FakeTokenRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i3.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TokenRepository get tokenRepo => (super.noSuchMethod(
        Invocation.getter(#tokenRepo),
        returnValue: _FakeTokenRepository_0(
          this,
          Invocation.getter(#tokenRepo),
        ),
      ) as _i2.TokenRepository);

  @override
  _i4.Future<String> register(_i5.AuthModel? authModel) => (super.noSuchMethod(
        Invocation.method(
          #register,
          [authModel],
        ),
        returnValue: _i4.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #register,
            [authModel],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<String> login(_i5.AuthModel? authModel) => (super.noSuchMethod(
        Invocation.method(
          #login,
          [authModel],
        ),
        returnValue: _i4.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #login,
            [authModel],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> isLoggedIn() => (super.noSuchMethod(
        Invocation.method(
          #isLoggedIn,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
